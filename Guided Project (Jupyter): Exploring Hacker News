
Source: https://app.dataquest.io/m/356/guided-project%3A-exploring-hacker-news-posts/8/next-steps
# reading data into a list of lists

from csv import reader

opened_file = open('HN_posts_year_to_Sep_26_2016.csv', encoding="utf8")
read_file = reader(opened_file)
hn = list(read_file)
print(hn[:6], end='\n')

# removing header row
​
headers = hn[0]
hn = hn[1:]
print(headers)
print(hn[:6])
['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at']
[['12579008', 'You have two days to comment if you want stem cells to be classified as your own', 'http://www.regulations.gov/document?D=FDA-2015-D-3719-0018', '1', '0', 'altstar', '9/26/2016 3:26'], ['12579005', 'SQLAR  the SQLite Archiver', 'https://www.sqlite.org/sqlar/doc/trunk/README.md', '1', '0', 'blacksqr', '9/26/2016 3:24'], ['12578997', 'What if we just printed a flatscreen television on the side of our boxes?', 'https://medium.com/vanmoof/our-secrets-out-f21c1f03fdc8#.ietxmez43', '1', '0', 'pavel_lishin', '9/26/2016 3:19'], ['12578989', 'algorithmic music', 'http://cacm.acm.org/magazines/2011/7/109891-algorithmic-composition/fulltext', '1', '0', 'poindontcare', '9/26/2016 3:16'], ['12578979', 'How the Data Vault Enables the Next-Gen Data Warehouse and Data Lake', 'https://www.talend.com/blog/2016/05/12/talend-and-Â\x93the-data-vaultÂ\x94', '1', '0', 'markgainor1', '9/26/2016 3:14'], ['12578975', 'Saving the Hassle of Shopping', 'https://blog.menswr.com/2016/09/07/whats-new-with-your-style-feed/', '1', '1', 'bdoux', '9/26/2016 3:13']]

# filstering posts beginning with Ask HN or Show HN
​
ask_posts = []
show_posts = []
other_posts = []
​
for row in hn:
    title = row[1]
    if title.lower().startswith('ask hn'):
        ask_posts.append(row)
    elif title.lower().startswith('show hn'):
        show_posts.append(row)
    else:
        other_posts.append(row)
        
print(len(ask_posts))
print(len(show_posts))
print(len(other_posts))
9139
10158
273822

# do ask posts or show posts receive more comments on average?
​
total_ask_comments = 0
​
for row in ask_posts:
    total_ask_comments += int(row[4])
    
avg_ask_comments = total_ask_comments / len(ask_posts)
​
total_show_comments = 0
​
for row in show_posts:
    total_show_comments += int(row[4])
    
avg_show_comments = total_show_comments / len(show_posts)
​
print(avg_ask_comments)
print(avg_show_comments)
10.393478498741656
4.886099625910612
datetime

# calculating the amout of ask posts and total amount of comments on them created per hour
​
import datetime as dt 
​
result_list = []
​
for row in ask_posts:
    list_res = []
    created_at = row[6]
    num_comments = int(row[4])
    list_res.append(created_at)
    list_res.append(num_comments)
    result_list.append(list_res)
    
counts_by_hour = {}
comments_by_hour = {}
​
for row in result_list:
    # 9/26/2016 3:14
    date = dt.datetime.strptime(row[0], '%m/%d/%Y %H:%M')
    hour = date.hour
    if hour not in counts_by_hour.keys():
        counts_by_hour[hour] = 1
        comments_by_hour[hour] = int(row[1])
    else:
        counts_by_hour[hour] += 1
        comments_by_hour[hour] += int(row[1])
        
print(comments_by_hour)
print(counts_by_hour)
{2: 2996, 1: 2089, 22: 3372, 21: 4500, 19: 3954, 17: 5547, 15: 18525, 14: 4972, 13: 7245, 11: 2797, 10: 3013, 9: 1477, 7: 1585, 3: 2154, 23: 2297, 20: 4462, 16: 4466, 8: 2362, 0: 2277, 18: 4877, 12: 4234, 4: 2360, 6: 1587, 5: 1838}
{2: 269, 1: 282, 22: 383, 21: 518, 19: 552, 17: 587, 15: 646, 14: 513, 13: 444, 11: 312, 10: 282, 9: 222, 7: 226, 3: 271, 23: 343, 20: 510, 16: 579, 8: 257, 0: 301, 18: 614, 12: 342, 4: 243, 6: 234, 5: 209}
unts

# calculating average number of comments per post per hour
​
avg_by_hour = []
​
for hour in comments_by_hour:
    avg_by_hour.append([hour, comments_by_hour[hour] / counts_by_hour[hour]])
    
print(avg_by_hour)    
[[2, 11.137546468401487], [1, 7.407801418439717], [22, 8.804177545691905], [21, 8.687258687258687], [19, 7.163043478260869], [17, 9.449744463373083], [15, 28.676470588235293], [14, 9.692007797270955], [13, 16.31756756756757], [11, 8.96474358974359], [10, 10.684397163120567], [9, 6.653153153153153], [7, 7.013274336283186], [3, 7.948339483394834], [23, 6.696793002915452], [20, 8.749019607843136], [16, 7.713298791018998], [8, 9.190661478599221], [0, 7.5647840531561465], [18, 7.94299674267101], [12, 12.380116959064328], [4, 9.7119341563786], [6, 6.782051282051282], [5, 8.794258373205741]]
.0f
swap_avg_by_hour = []
​
for row in avg_by_hour:
    row[0], row[1] = row[1], row[0]
    swap_avg_by_hour.append(row)
​
sorted_swap = sorted(swap_avg_by_hour, reverse = True)
​
print("Top 5 Hours for Ask Posts Comments")
​
for avg, hour in sorted_swap[:5]:
    print(f'{hour:.0f}:00: {avg:.2f} average comments per post.')
​
Top 5 Hours for Ask Posts Comments
15:00: 28.68 average comments per post.
13:00: 16.32 average comments per post.
12:00: 12.38 average comments per post.
2:00: 11.14 average comments per post.
10:00: 10.68 average comments per post.
